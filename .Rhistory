indi <- indi +1
}
}
max_right_ratio <- indi/len
return(list(err=deconvo_result$err[deconvo_result$step],err_diff=deconvo_result$err_diff[deconvo_result$step],W=rot_ind2,W_diff_rate=W_diff,H_max_right=max_right_ratio))
}
##this structure indexing object is used for accounting for the fact that some datasets do not have all cell types' information
##the 1st column of cell_structure denote cell types 1-11
##the 2nd column of cell_structure denote in test data the corresponding cell's index
##if we were to merge 1,2,3 cells in our original list into 1 cell types, we specify the corresponding rows in destin_index with the same value
##if we do not want to consider one cell type, we just give a NA value in the corresponding postition in the 2nd column
cell_structure_example  <- data.frame(original_index = seq(1,11),destin_index =seq(1,11))
rownames(cell_structure_example) <- unique(final_marker_v3$Cell)
##If do not use test mode, then set test_mode=F and do not need to input a cell_structure
##Always remember A_input = 1-A_ref
NMF_Meta_April13<-function(Y, A, tol=10^-5,num_cell=11,max.itr=2000,test_mode=F,real_H=NA,row_index=seq(1:53),cell_structure=NA,correlation="p",row_mean=row_mean){
consistency_table <- matrix(rep(0,27),ncol=3)
real_corr_table   <- matrix(rep(0,27),ncol=3)
##########################################no permutation case#############################################
##Iterate over beta=0.05,beta=100 and data-dependent beta
Y <- Y[row_index,]
Y_normal_row <- Y/row_mean[row_index]
Y_normal_row_col <- sqrt( nrow(Y_normal_row) )*t(t(Y_normal_row)/sqrt(apply(Y_normal_row^2, 2,sum)))
A <- A[row_index,]
##first specification of parameter
##non data dependent
lam_W =5000;
beta_W = 0.05; eta=200;
result1=list(1)
#1st column, 1:3 rows
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y,lam_W=lam_W, beta_W = beta_W, A=A, eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0, perm_type=0)
result1[[scaling+1]]=deconvo_result0}
#2nd column, 1:3 rows
result2=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y_normal_row,lam_W = lam_W, beta_W = beta_W, A=A,eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result2[[scaling+1]]=deconvo_result1}
#3rd column, 1:3 rows
result3=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta= eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result3[[scaling+1]]=deconvo_result2}
##second specification of parameter
##non data dependent
lam_W =5000;
beta_W = 100; eta=200;
#4th column, 1:3 rows
result4=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y,lam_W = lam_W, beta_W = beta_W, A=A, eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result4[[scaling+1]]=deconvo_result0}
#5th column, 1:3 rows
result5=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y_normal_row,lam_W = lam_W, beta_W = beta_W, A=A,eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result5[[scaling+1]]=deconvo_result1}
#6th column, 1:3 rows
result6=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result6[[scaling+1]]=deconvo_result2}
##3rd specification of parameter
##data dependent
reg_para=1
#7th column, 1:3 rows
result7=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y,lam_W = lam_W, beta_W = beta_W, A=A, eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1,perm_type=0)
result7[[scaling+1]]=deconvo_result0}
#8th column, 1:3 rows
result8=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y_normal_row,lam_W = lam_W, beta_W = beta_W, A=A,eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1,perm_type=0)
result8[[scaling+1]]=deconvo_result1}
#9th column, 1:3 rows
result9=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1,perm_type=0)
result9[[scaling+1]]=deconvo_result2}
result_non_permut=list(result1,result2,result3,result4,result5,result6,result7,result8,result9)
###################################end of no permutation case#########################################
##################################start of permutation section#######################################
ncolY=ncol(Y); rand_perm=sample(1:ncolY)
Y2=Y[,rand_perm]
if (test_mode==T){
real_H_permut <- real_H[,rand_perm]
}
##Iterate over beta=0.05,beta=100 and data-dependent beta
Y2_normal_row <- Y2/row_mean[row_index]
Y2_normal_row_col <- sqrt( nrow(Y2_normal_row) )*t(t(Y2_normal_row)/sqrt(apply(Y2_normal_row^2, 2,sum)))
##first specification of parameter
##non data dependent
lam_W =5000;
beta_W = 0.05; eta=200;
result1=list(1)
#1st column, 1:3 rows
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result1[[scaling+1]]=deconvo_result0}
#2nd column, 1:3 rows
result2=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result2[[scaling+1]]=deconvo_result1}
#3rd column, 1:3 rows
result3=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result3[[scaling+1]]=deconvo_result2}
##second specification of parameter
##non data dependent
lam_W =5000;
beta_W = 100; eta=200;
#4th column, 1:3 rows
result4=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result4[[scaling+1]]=deconvo_result0}
#5th column, 1:3 rows
result5=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result5[[scaling+1]]=deconvo_result1}
#6th column, 1:3 rows
result6=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result6[[scaling+1]]=deconvo_result2}
##3rd specification of parameter
##data dependent
reg_para=1
#7th column, 1:3 rows
result7=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result7[[scaling+1]]=deconvo_result0}
#8th column, 1:3 rows
result8=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result8[[scaling+1]]=deconvo_result1}
#9th column, 1:3 rows
result9=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result9[[scaling+1]]=deconvo_result2}
result_permut=list(result1,result2,result3,result4,result5,result6,result7,result8,result9)
##in the test mode, if the labelled data has different cell types with us, we rearrange the results based on cell_structure
transform_H <- function(input_H,cell_structure){
dest_index <- sort(unique(cell_structure$destin_index))
outcome_H <- matrix(rep(0,ncol(input_H)*max(dest_index)),ncol=ncol(input_H))
for (i in 1:num_cell){
if ( !is.na(cell_structure$destin_index[i]) ){
outcome_H[cell_structure$destin_index[i],] <- outcome_H[cell_structure$destin_index[i],]+input_H[i,]
}
}
return(outcome_H)
}
##################end of function##########################
################generate output consistency table##########
#fxn for K-L divergence
kl_div_disc <- function(aa,bb){
aa=aa/sum(aa); bb=bb/sum(bb); clength=length(aa); aa=pmax(aa,10^(-30)); bb=pmax(bb,10^(-30));
return(sum(aa*log(aa/bb)))}
for (i1 in 1:9){
for (i2 in 1:3){
consistency_table[i1,i2]=mean(diag(cor(result_permut[[i1]][[i2]]$H,(result_non_permut[[i1]][[i2]]$H[,rand_perm]) ) ) )
}}
######generate output real correlation table (onlly in test mode)########
if (test_mode==T){
for (i1 in 1:9){
for (i2 in 1:3){
if (correlation=="p"){
real_corr_table[i1,i2]=mean(diag(cor(transform_H(result_non_permut[[i1]][[i2]]$H, cell_structure),(real_H))))
}
if (correlation=="s"){
real_corr_table[i1,i2]=mean(diag(cor(transform_H(result_non_permut[[i1]][[i2]]$H, cell_structure),(real_H),method = "spearman" ) ) )
}
if (correlation=="kl"){
temp_kl <- rep(-1,ncol(Y))
trans_H<-transform_H(result_non_permut[[i1]][[i2]]$H , cell_structure)
for (kl in 1:4){
temp_kl[kl] <- kl_div_disc( aa = real_H[,kl], bb=trans_H[,kl])
}
real_corr_table[i1,i2]=mean(temp_kl)
}
}}
}
#####Final Quality Control Stage######
#filtered by column sum
#column sum table for 27 Hs
H_dist=array(0,c(9,3))
for (i1 in 1:9){
for (i2 in 1:3){
H_dist[i1,i2]=mean(apply(result_non_permut[[i1]][[i2]]$H,2,sum))
}
}
report_consistency_table<-consistency_table*(H_dist<1.1)
#rreal_tab1
#consider_col=1:9;   #c(1,4,7)
#thres_H=1.05;   # thres_H=200
#rankk=cbind(1:27, -as.vector(ccons_tab[,consider_col]*(H_dist[,consider_col]<thres_H)), as.vector(rreal_tab1[,consider_col]))
#rankk2=rankk[order(rankk[,2]),]
#plot(1:27, rankk2[,3])
#####output results#############
if (test_mode==T){
return(list(consistency_table=report_consistency_table,real_corr_table=real_corr_table,real_corr_table=real_corr_table,result_non_permut=result_non_permut))}
else {
return(list(consistency_table=report_consistency_table,result_non_permut=result_non_permut))
}
}
NMF_Meta_April13(Y=as.matrix(ctla4_clinical_info[ctla4_row_num,-c(1,2)]),A = A_v5, row_index = setdiff(seq(1,53),ctla4_rm_row),test_mode = F,row_mean = row_mean_v5,num_cell = 11)
ctla4_row_num[26] <- 1000
ctla4_out <-NMF_Meta_April13(Y=as.matrix(ctla4_clinical_info[ctla4_row_num,-c(1,2)]),A = A_v5, row_index = setdiff(seq(1,53),ctla4_rm_row),test_mode = F,row_mean = row_mean_v5,num_cell = 11)
ctla4_row_num
ctla4_row_num[26] <- 1000
ctla4_row_num[41] <- 1000
ctla4_out <-NMF_Meta_April13(Y=as.matrix(ctla4_clinical_info[ctla4_row_num,-c(1,2)]),A = A_v5, row_index = setdiff(seq(1,53),ctla4_rm_row),test_mode = F,row_mean = row_mean_v5,num_cell = 11)
as.matrix(ctla4_clinical_info[ctla4_row_num,-c(1,2)])
ctla4_out <-NMF_Meta_April13(Y=as.matrix(ctla4_rpkm_raw[ctla4_row_num,-c(1,2)]),A = A_v5, row_index = setdiff(seq(1,53),ctla4_rm_row),test_mode = F,row_mean = row_mean_v5,num_cell = 11)
ctla4_out$consistency_table
ctla4_H<-ctla4_out$result_non_permut[[3]][[3]]$H
i<-3
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col],PR=ctla4_H[i,ctla4_PR_group_col],SD=ctla4_H[i,ctla4_SD_group_col],PD=ctla4_H[i,ctla4_PD_group_col]))
dim(ctla4_H)
i<-3
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-2
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-11
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-6
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-3
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-2
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-4
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-11
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-3
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
ctla4_CR_group_col
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
ctla4_out$consistency_table
ctla4_H<-ctla4_out$result_non_permut[[3]][[2]]$H
i<-3
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
ctla4_H<-ctla4_out$result_non_permut[[3]][[3]]$H
i<-3
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-10
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-19
i<-9
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-1
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-2
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-3
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-4
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-4
i<-5
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-6
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
i<-7
boxplot(list(CR=ctla4_H[i,ctla4_CR_group_col-2],PR=ctla4_H[i,ctla4_PR_group_col-2],SD=ctla4_H[i,ctla4_SD_group_col-2],PD=ctla4_H[i,ctla4_PD_group_col-2]))
View(ctla4_H)
View(ctla4_clinical_info)
unique(ctla4_clinical_info$group)
##the second way is categorized
ctla4_res_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="response")))
ctla4_lts_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="survival")))
ctla4_nres_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="nonresponse")))
ctla4_res_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="res")])
ctla4_lts_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="lts")])
ctla4_nres_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="nres")])
ctla4_res_pat
ctla4_lts_pat
##the second way is categorized
ctla4_res_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="response")))
ctla4_lts_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="survival")))
ctla4_nres_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="nonresponse")))
ctla4_res_group_col
ctla4_res_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="res")])
ctla4_lts_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="lts")])
ctla4_nres_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="nres")])
ctla4_res_pat
ctla4_res_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="response")])
ctla4_lts_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="survival")])
ctla4_nres_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="nonresponse")])
ctla4_res_pat
ctla4_lts_pat
ctla4_lts_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="survival")])
##the second way is categorized
ctla4_res_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="response")))
ctla4_lts_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="long-survival")))
ctla4_nres_group_col <- rep(-1,length(which(ctla4_clinical_info$group=="nonresponse")))
ctla4_res_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="response")])
ctla4_lts_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="long-survival")])
ctla4_nres_pat <- as.character(ctla4_clinical_info$patient[which(ctla4_clinical_info$group=="nonresponse")])
ctla4_res_pat
ctla4_lts_pat
ctla4_nres_pat
for (i in 1:length(ctla4_res_pat)){
ctla4_res_group_col[i] <- grep(ctla4_res_pat[i],colnames(ctla4_rpkm_raw))
}
ctla4_res_group_col
for (i in 1:length(ctla4_lts_pat)){
ctla4_lts_group_col[i] <- grep(ctla4_lts_pat[i],colnames(ctla4_rpkm_raw))
}
ctla4_lts_group_col
for (i in 1:length(ctla4_SD_pat)){
ctla4_nres_group_col[i] <- grep(ctla4_nres_pat[i],colnames(ctla4_rpkm_raw))
}
ctla4_nres_group_col
ctla4_nres_pat
for (i in 1:length(ctla4_nres_pat)){
ctla4_nres_group_col[i] <- grep(ctla4_nres_pat[i],colnames(ctla4_rpkm_raw))
}
ctla4_nres_group_col
ctla4_lts_group_col
ctla4_H<-ctla4_out$result_non_permut[[3]][[3]]$H
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],non-res=ctla4_H[i,ctla4_nres_group_col-2]))
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,ctla4_nres_group_col-2]))
i<-2
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,ctla4_nres_group_col-2]))
i<-11
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,ctla4_nres_group_col-2]))
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,ctla4_nres_group_col-2]))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,ctla4_nres_group_col-2])
i<-3
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,ctla4_nres_group_col-2])
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,ctla4_nres_group_col-2]))
i<-2
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,ctla4_nres_group_col-2]))
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,ctla4_nres_group_col-2]))
ctla4_H[i,ctla4_nres_group_col-2]
grep("Pat37",colnames(ctla4_rpkm_raw))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,setdiff(ctla4_nres_group_col,37)-2])
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,37)-2]))
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2])
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
quantile(as.matrix(ctla4_rpkm_raw[ctla4_row_num,-c(1,2)]))
quantile(as.matrix(ctla4_rpkm_raw[ctla4_row_num,-c(1,2)]),seq(0.1,1,0.1))
ctla4_out <-NMF_Meta_Altsil13(Y=2^as.matrix(ctla4_rpkm_raw[ctla4_row_num,-c(1,2)]),A = A_v5, row_index = setdiff(seq(1,53),ctla4_rm_row),test_mode = F,row_mean = row_mean_v5,num_cell = 11)
ctla4_out <-NMF_Meta_April13(Y=2^as.matrix(ctla4_rpkm_raw[ctla4_row_num,-c(1,2)]),A = A_v5, row_index = setdiff(seq(1,53),ctla4_rm_row),test_mode = F,row_mean = row_mean_v5,num_cell = 11)
expr_ctla4 <-2^as.matrix(ctla4_rpkm_raw[ctla4_row_num,-c(1,2)])
View(expr_ctla4)
View(as.matrix(ctla4_rpkm_raw[ctla4_row_num,-c(1,2)]))
4.968304e+00
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2])
View(as.matrix(ctla4_rpkm_raw[ctla4_row_num,-c(1,2)]))
View(final_marker_v5_genelevel)
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2])
i<-4
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
i<-5
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
i<-6
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2])
i<-7
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
i<-8
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
i<-9
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
i<-10
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
i<-11
i<-11
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2])
ctla4_H<-ctla4_out$result_non_permut[[3]][[3]]$H
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2]))
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,0)-2]))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2])
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,0)-2]))
i<-5
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,0)-2]))
i<-3
boxplot(list(res=ctla4_H[i,ctla4_res_group_col-2],lts=ctla4_H[i,ctla4_lts_group_col-2],nonres=ctla4_H[i,setdiff(ctla4_nres_group_col,0)-2]))
t.test(x = ctla4_H[i,ctla4_res_group_col-2],y=ctla4_H[i,setdiff(ctla4_nres_group_col,23)-2])
save.image("~/Desktop/Lab/Deconvolution/Rdata/back_up_sep7.RData")
library(rstan)
install.packages("rstan")
library(rstan)
library("rstantools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(rstan)
library(rstanarm)
library(bayesplot)
library(brms)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
MAKEVARS <- file.path(dotR, "Makevars")
if (!file.exists(MAKEVARS)) file.create(MAKEVARS)
cat(
"\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function  -Wno-macro-redefined -Wno-unknown-pragmas",
"\nCC=clang",
"CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = MAKEVARS,
sep = "\n",
append = TRUE
)
# print the contents to the console
cat(readLines(MAKEVARS), sep = "\n")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(rstan)
library(rstanarm)
library("RcppEigen", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:rstantools", unload=TRUE)
library("rstantools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(rstan)
library("testthat")
context("Test the output of homework 1.")
#' Fit a linear model
#'
#' @description This function passes parameters to the lm function.
#' @param formula a formula
#' @param data a data.frame
#' @return An lm object
#' @examples
#' fit <- linear_model(Sepal.Length ~., iris)
#' summary(fit)
#' @export
linear_model <- function(formula, data) {
# Your code here.
return(lm(formula = formula, data = data))
}
#' A data set for the first homework
#'
#' @name lm_patho
#' @alias lm_patho
#' @docType data
#' @rdname lm_patho
#' @description In homework 1 we explore the effect of numerical instability
#' on linear regressions. This data set gives us a basis for exploration.
NULL
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
data(lm_patho)
load("/Users/tand/Desktop/2018fall/bis557/bis557/data/lm_patho.rda")
data(lm_patho)
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
total_string_length <- function(x) {
n_chars <- sapply(x, nchar)
browser()
sum(n_chars)}
total_string_length(list())
total_string_length(list())
ls.str()
load("/Users/tand/Desktop/2018fall/bis557/bis557/data/lm_patho.rda")
library(devtools)
document
document()
getwd()
setwd("~/Desktop/2018fall/bis557/bis557/")
document()
setwd("~/Desktop/2018fall/bis557/bis557/")
document()
detach("package:devtools", unload=TRUE)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
update.packages(devtools)
update.packages('devtools')
getwd()
document
document()
